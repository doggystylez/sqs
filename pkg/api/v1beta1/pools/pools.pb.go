// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sqs/pools/v1beta1/pools.proto

package pools

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	v1beta1 "github.com/osmosis-labs/sqs/pkg/api/v1beta1"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// IncentiveType represents the type of incentive for the pool.
type IncentiveType int32

const (
	IncentiveType_SUPERFLUID IncentiveType = 0
	IncentiveType_OSMOSIS    IncentiveType = 1
	IncentiveType_BOOST      IncentiveType = 2
	IncentiveType_NONE       IncentiveType = 3
)

var IncentiveType_name = map[int32]string{
	0: "SUPERFLUID",
	1: "OSMOSIS",
	2: "BOOST",
	3: "NONE",
}

var IncentiveType_value = map[string]int32{
	"SUPERFLUID": 0,
	"OSMOSIS":    1,
	"BOOST":      2,
	"NONE":       3,
}

func (x IncentiveType) String() string {
	return proto.EnumName(IncentiveType_name, int32(x))
}

func (IncentiveType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_30f2696e6c186971, []int{0}
}

// GetPoolsFilter is the filter type for querying pools.
// It is used to filter pools based on the provided fields.
type GetPoolsRequestFilter struct {
	// pool_id is the pool id to query. If not provided, will return all pools.
	PoolId []uint64 `protobuf:"varint,1,rep,packed,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// pool_id_not_in is the list of pool id to exclude from the query.
	PoolIdNotIn []uint64 `protobuf:"varint,2,rep,packed,name=pool_id_not_in,json=poolIdNotIn,proto3" json:"pool_id_not_in,omitempty"`
	// type is the pool type to filter pools by.
	Type []uint64 `protobuf:"varint,3,rep,packed,name=type,proto3" json:"type,omitempty"`
	// incentive is the incentive to filter pools by.
	Incentive []IncentiveType `protobuf:"varint,4,rep,packed,name=incentive,proto3,enum=sqs.pools.v1beta1.IncentiveType" json:"incentive,omitempty"`
	// min_liquidity_cap is the minimum liquidity cap to filter pools by.
	MinLiquidityCap uint64 `protobuf:"varint,5,opt,name=min_liquidity_cap,json=minLiquidityCap,proto3" json:"min_liquidity_cap,omitempty"`
	// with_market_incentives indicates whether to include incentives into pools
	// response.
	WithMarketIncentives bool `protobuf:"varint,6,opt,name=with_market_incentives,json=withMarketIncentives,proto3" json:"with_market_incentives,omitempty"`
	// search is the search string to filter pools by.
	Search string `protobuf:"bytes,7,opt,name=search,proto3" json:"search,omitempty"`
}

func (m *GetPoolsRequestFilter) Reset()         { *m = GetPoolsRequestFilter{} }
func (m *GetPoolsRequestFilter) String() string { return proto.CompactTextString(m) }
func (*GetPoolsRequestFilter) ProtoMessage()    {}
func (*GetPoolsRequestFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_30f2696e6c186971, []int{0}
}
func (m *GetPoolsRequestFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPoolsRequestFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPoolsRequestFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPoolsRequestFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPoolsRequestFilter.Merge(m, src)
}
func (m *GetPoolsRequestFilter) XXX_Size() int {
	return m.Size()
}
func (m *GetPoolsRequestFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPoolsRequestFilter.DiscardUnknown(m)
}

var xxx_messageInfo_GetPoolsRequestFilter proto.InternalMessageInfo

func (m *GetPoolsRequestFilter) GetPoolId() []uint64 {
	if m != nil {
		return m.PoolId
	}
	return nil
}

func (m *GetPoolsRequestFilter) GetPoolIdNotIn() []uint64 {
	if m != nil {
		return m.PoolIdNotIn
	}
	return nil
}

func (m *GetPoolsRequestFilter) GetType() []uint64 {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *GetPoolsRequestFilter) GetIncentive() []IncentiveType {
	if m != nil {
		return m.Incentive
	}
	return nil
}

func (m *GetPoolsRequestFilter) GetMinLiquidityCap() uint64 {
	if m != nil {
		return m.MinLiquidityCap
	}
	return 0
}

func (m *GetPoolsRequestFilter) GetWithMarketIncentives() bool {
	if m != nil {
		return m.WithMarketIncentives
	}
	return false
}

func (m *GetPoolsRequestFilter) GetSearch() string {
	if m != nil {
		return m.Search
	}
	return ""
}

// GetPoolsRequest is the request type for the Service.Get RPC method.
type GetPoolsRequest struct {
	// Filter options for the result set
	Filter *GetPoolsRequestFilter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	// Pagination options for the result set
	Pagination *v1beta1.PaginationRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// Sort options for the result set
	Sort *v1beta1.SortRequest `protobuf:"bytes,3,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (m *GetPoolsRequest) Reset()         { *m = GetPoolsRequest{} }
func (m *GetPoolsRequest) String() string { return proto.CompactTextString(m) }
func (*GetPoolsRequest) ProtoMessage()    {}
func (*GetPoolsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_30f2696e6c186971, []int{1}
}
func (m *GetPoolsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPoolsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPoolsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPoolsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPoolsRequest.Merge(m, src)
}
func (m *GetPoolsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPoolsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPoolsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPoolsRequest proto.InternalMessageInfo

func (m *GetPoolsRequest) GetFilter() *GetPoolsRequestFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *GetPoolsRequest) GetPagination() *v1beta1.PaginationRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *GetPoolsRequest) GetSort() *v1beta1.SortRequest {
	if m != nil {
		return m.Sort
	}
	return nil
}

// TODO: Add more fields to the response
type GetPoolsResponse struct {
}

func (m *GetPoolsResponse) Reset()         { *m = GetPoolsResponse{} }
func (m *GetPoolsResponse) String() string { return proto.CompactTextString(m) }
func (*GetPoolsResponse) ProtoMessage()    {}
func (*GetPoolsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_30f2696e6c186971, []int{2}
}
func (m *GetPoolsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPoolsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPoolsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPoolsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPoolsResponse.Merge(m, src)
}
func (m *GetPoolsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPoolsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPoolsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPoolsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("sqs.pools.v1beta1.IncentiveType", IncentiveType_name, IncentiveType_value)
	proto.RegisterType((*GetPoolsRequestFilter)(nil), "sqs.pools.v1beta1.GetPoolsRequestFilter")
	proto.RegisterType((*GetPoolsRequest)(nil), "sqs.pools.v1beta1.GetPoolsRequest")
	proto.RegisterType((*GetPoolsResponse)(nil), "sqs.pools.v1beta1.GetPoolsResponse")
}

func init() { proto.RegisterFile("sqs/pools/v1beta1/pools.proto", fileDescriptor_30f2696e6c186971) }

var fileDescriptor_30f2696e6c186971 = []byte{
	// 494 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x4f, 0x6f, 0xda, 0x3e,
	0x18, 0xc7, 0x31, 0xa4, 0x50, 0x1e, 0xf4, 0xa3, 0xd4, 0xfa, 0xad, 0xb3, 0xaa, 0x2d, 0x8a, 0xd8,
	0x0e, 0x51, 0xa5, 0x81, 0x60, 0x3b, 0x4f, 0x5b, 0xd7, 0x76, 0x42, 0x6b, 0x09, 0x4a, 0xda, 0xcb,
	0x2e, 0x51, 0x00, 0x0f, 0xac, 0x12, 0x3b, 0x89, 0x4d, 0x27, 0xde, 0xc5, 0xde, 0xc3, 0xde, 0xcc,
	0x2e, 0x93, 0x7a, 0xdc, 0x71, 0x82, 0x37, 0x32, 0xc5, 0x09, 0xb0, 0xae, 0xdc, 0xfc, 0xf8, 0xfb,
	0x7c, 0xbe, 0xf6, 0xf3, 0x07, 0x9e, 0xcb, 0x58, 0xb6, 0x23, 0x21, 0x66, 0xb2, 0x7d, 0xd7, 0x19,
	0x52, 0x15, 0x74, 0xb2, 0xa8, 0x15, 0x25, 0x42, 0x09, 0x7c, 0x28, 0x63, 0xd9, 0xca, 0x2e, 0x72,
	0xf9, 0xb8, 0x99, 0x12, 0xf1, 0x9c, 0x26, 0x8b, 0x2d, 0x11, 0x4c, 0x18, 0x0f, 0x14, 0x13, 0x3c,
	0xc3, 0x8e, 0x9f, 0x3d, 0xce, 0x91, 0x22, 0x51, 0x99, 0xda, 0xfc, 0x5e, 0x84, 0x27, 0x1f, 0xa9,
	0x1a, 0xa4, 0xb6, 0x2e, 0x8d, 0xe7, 0x54, 0xaa, 0x0b, 0x36, 0x53, 0x34, 0xc1, 0x4f, 0xa1, 0x92,
	0x3e, 0xe6, 0xb3, 0x31, 0x41, 0x56, 0xc9, 0x36, 0xdc, 0x72, 0x1a, 0xf6, 0xc6, 0xf8, 0x05, 0xd4,
	0x73, 0xc1, 0xe7, 0x42, 0xf9, 0x8c, 0x93, 0xa2, 0xd6, 0x6b, 0x99, 0xde, 0x17, 0xaa, 0xc7, 0x31,
	0x06, 0x43, 0x2d, 0x22, 0x4a, 0x4a, 0x5a, 0xd2, 0x67, 0xfc, 0x16, 0xaa, 0x8c, 0x8f, 0x28, 0x57,
	0xec, 0x8e, 0x12, 0xc3, 0x2a, 0xd9, 0xf5, 0xae, 0xd5, 0x7a, 0x54, 0x54, 0xab, 0xb7, 0xce, 0xb9,
	0x5e, 0x44, 0xd4, 0xdd, 0x22, 0xf8, 0x04, 0x0e, 0x43, 0xc6, 0xfd, 0x19, 0x8b, 0xe7, 0x6c, 0xcc,
	0xd4, 0xc2, 0x1f, 0x05, 0x11, 0xd9, 0xb3, 0x90, 0x6d, 0xb8, 0x07, 0x21, 0xe3, 0x97, 0xeb, 0xfb,
	0x0f, 0x41, 0x84, 0xdf, 0xc0, 0xd1, 0x57, 0xa6, 0xa6, 0x7e, 0x18, 0x24, 0xb7, 0x34, 0xfd, 0x64,
	0x6e, 0x22, 0x49, 0xd9, 0x42, 0xf6, 0xbe, 0xfb, 0x7f, 0xaa, 0x5e, 0x69, 0x71, 0xf3, 0x9e, 0xc4,
	0x47, 0x50, 0x96, 0x34, 0x48, 0x46, 0x53, 0x52, 0xb1, 0x90, 0x5d, 0x75, 0xf3, 0xa8, 0xf9, 0x13,
	0xc1, 0xc1, 0x3f, 0x5d, 0xc2, 0xef, 0xa0, 0xfc, 0x45, 0x77, 0x8a, 0x20, 0x0b, 0xd9, 0xb5, 0xae,
	0xbd, 0xa3, 0x94, 0x9d, 0x9d, 0x75, 0x73, 0x0e, 0x9f, 0x01, 0x6c, 0xa7, 0x45, 0x8a, 0xda, 0xe5,
	0xa5, 0x76, 0xd1, 0xe3, 0xda, 0xb8, 0x0c, 0x36, 0x49, 0xb9, 0x8f, 0xfb, 0x17, 0x87, 0xbb, 0x60,
	0xa4, 0xf3, 0x24, 0x25, 0xcd, 0x9b, 0x3b, 0x78, 0x4f, 0x24, 0x6a, 0x4d, 0xea, 0xdc, 0x26, 0x86,
	0xc6, 0xf6, 0x6b, 0x32, 0x12, 0x5c, 0xd2, 0x93, 0xf7, 0xf0, 0xdf, 0x83, 0xce, 0xe3, 0x3a, 0x80,
	0x77, 0x33, 0x38, 0x77, 0x2f, 0x2e, 0x6f, 0x7a, 0x67, 0x8d, 0x02, 0xae, 0x41, 0xc5, 0xf1, 0xae,
	0x1c, 0xaf, 0xe7, 0x35, 0x10, 0xae, 0xc2, 0xde, 0xa9, 0xe3, 0x78, 0xd7, 0x8d, 0x22, 0xde, 0x07,
	0xa3, 0xef, 0xf4, 0xcf, 0x1b, 0xa5, 0xd3, 0x4f, 0x3f, 0x96, 0x26, 0xba, 0x5f, 0x9a, 0xe8, 0xf7,
	0xd2, 0x44, 0xdf, 0x56, 0x66, 0xe1, 0x7e, 0x65, 0x16, 0x7e, 0xad, 0xcc, 0xc2, 0xe7, 0xce, 0x84,
	0xa9, 0xe9, 0x7c, 0xd8, 0x1a, 0x89, 0xb0, 0x2d, 0x64, 0x28, 0x24, 0x93, 0xaf, 0x66, 0xc1, 0x50,
	0xb6, 0xf5, 0xca, 0xdf, 0x4e, 0xda, 0x41, 0xc4, 0x1e, 0x2e, 0xfd, 0xb0, 0xac, 0x17, 0xf4, 0xf5,
	0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdd, 0x1b, 0xcf, 0x81, 0x16, 0x03, 0x00, 0x00,
}

func (m *GetPoolsRequestFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPoolsRequestFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPoolsRequestFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Search) > 0 {
		i -= len(m.Search)
		copy(dAtA[i:], m.Search)
		i = encodeVarintPools(dAtA, i, uint64(len(m.Search)))
		i--
		dAtA[i] = 0x3a
	}
	if m.WithMarketIncentives {
		i--
		if m.WithMarketIncentives {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.MinLiquidityCap != 0 {
		i = encodeVarintPools(dAtA, i, uint64(m.MinLiquidityCap))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Incentive) > 0 {
		dAtA2 := make([]byte, len(m.Incentive)*10)
		var j1 int
		for _, num := range m.Incentive {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintPools(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Type) > 0 {
		dAtA4 := make([]byte, len(m.Type)*10)
		var j3 int
		for _, num := range m.Type {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintPools(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PoolIdNotIn) > 0 {
		dAtA6 := make([]byte, len(m.PoolIdNotIn)*10)
		var j5 int
		for _, num := range m.PoolIdNotIn {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintPools(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PoolId) > 0 {
		dAtA8 := make([]byte, len(m.PoolId)*10)
		var j7 int
		for _, num := range m.PoolId {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintPools(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPoolsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPoolsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPoolsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sort != nil {
		{
			size, err := m.Sort.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPools(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPools(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Filter != nil {
		{
			size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPools(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPoolsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPoolsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPoolsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintPools(dAtA []byte, offset int, v uint64) int {
	offset -= sovPools(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetPoolsRequestFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PoolId) > 0 {
		l = 0
		for _, e := range m.PoolId {
			l += sovPools(uint64(e))
		}
		n += 1 + sovPools(uint64(l)) + l
	}
	if len(m.PoolIdNotIn) > 0 {
		l = 0
		for _, e := range m.PoolIdNotIn {
			l += sovPools(uint64(e))
		}
		n += 1 + sovPools(uint64(l)) + l
	}
	if len(m.Type) > 0 {
		l = 0
		for _, e := range m.Type {
			l += sovPools(uint64(e))
		}
		n += 1 + sovPools(uint64(l)) + l
	}
	if len(m.Incentive) > 0 {
		l = 0
		for _, e := range m.Incentive {
			l += sovPools(uint64(e))
		}
		n += 1 + sovPools(uint64(l)) + l
	}
	if m.MinLiquidityCap != 0 {
		n += 1 + sovPools(uint64(m.MinLiquidityCap))
	}
	if m.WithMarketIncentives {
		n += 2
	}
	l = len(m.Search)
	if l > 0 {
		n += 1 + l + sovPools(uint64(l))
	}
	return n
}

func (m *GetPoolsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovPools(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovPools(uint64(l))
	}
	if m.Sort != nil {
		l = m.Sort.Size()
		n += 1 + l + sovPools(uint64(l))
	}
	return n
}

func (m *GetPoolsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovPools(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPools(x uint64) (n int) {
	return sovPools(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetPoolsRequestFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPools
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPoolsRequestFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPoolsRequestFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPools
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PoolId = append(m.PoolId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPools
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPools
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPools
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PoolId) == 0 {
					m.PoolId = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPools
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PoolId = append(m.PoolId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPools
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PoolIdNotIn = append(m.PoolIdNotIn, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPools
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPools
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPools
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PoolIdNotIn) == 0 {
					m.PoolIdNotIn = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPools
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PoolIdNotIn = append(m.PoolIdNotIn, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolIdNotIn", wireType)
			}
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPools
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Type = append(m.Type, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPools
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPools
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPools
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Type) == 0 {
					m.Type = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPools
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Type = append(m.Type, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
		case 4:
			if wireType == 0 {
				var v IncentiveType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPools
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= IncentiveType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Incentive = append(m.Incentive, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPools
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPools
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPools
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Incentive) == 0 {
					m.Incentive = make([]IncentiveType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v IncentiveType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPools
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= IncentiveType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Incentive = append(m.Incentive, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Incentive", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLiquidityCap", wireType)
			}
			m.MinLiquidityCap = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinLiquidityCap |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithMarketIncentives", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithMarketIncentives = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Search", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPools
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPools
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Search = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPools(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPools
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPoolsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPools
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPoolsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPoolsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPools
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPools
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &GetPoolsRequestFilter{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPools
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPools
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &v1beta1.PaginationRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPools
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPools
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sort == nil {
				m.Sort = &v1beta1.SortRequest{}
			}
			if err := m.Sort.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPools(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPools
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPoolsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPools
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPoolsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPoolsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPools(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPools
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPools(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPools
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPools
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPools
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPools
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPools
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPools
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPools        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPools          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPools = fmt.Errorf("proto: unexpected end of group")
)
